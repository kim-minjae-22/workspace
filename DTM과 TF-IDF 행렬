{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 파이썬으로 TF-IDF 직접 구현\nimport pandas as pd # 데이터프레임 사용을 위해\nfrom math import log # IDF 계산을 위해\n\ndocs = [\n  '먹고 싶은 사과',\n  '먹고 싶은 바나나',\n  '길고 노란 바나나 바나나',\n  '저는 과일이 좋아요'\n] \nvocab = list(set(w for doc in docs for w in doc.split()))\nvocab.sort()","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:26:50.239145Z","iopub.execute_input":"2024-10-29T02:26:50.239606Z","iopub.status.idle":"2024-10-29T02:26:52.001086Z","shell.execute_reply.started":"2024-10-29T02:26:50.239557Z","shell.execute_reply":"2024-10-29T02:26:51.999811Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# 총 문서의 수\nN = len(docs) \n\ndef tf(t, d):\n    return d.count(t)\n\ndef idf(t):\n    df = 0\n    for doc in docs:\n        df += t in doc\n    return log(N/(df+1))\n\ndef tfidf(t, d):\n    return tf(t,d)* idf(t)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:31:44.904919Z","iopub.execute_input":"2024-10-29T02:31:44.905382Z","iopub.status.idle":"2024-10-29T02:31:44.913419Z","shell.execute_reply.started":"2024-10-29T02:31:44.905338Z","shell.execute_reply":"2024-10-29T02:31:44.912002Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"result = []\n\n# 각 문서에 대해서 아래 연산을 반복\nfor i in range(N):\n    result.append([])\n    d = docs[i]\n    for j in range(len(vocab)):\n        t = vocab[j]\n        result[-1].append(tf(t, d))\n\ntf_ = pd.DataFrame(result, columns = vocab)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:31:54.942021Z","iopub.execute_input":"2024-10-29T02:31:54.942475Z","iopub.status.idle":"2024-10-29T02:31:54.951122Z","shell.execute_reply.started":"2024-10-29T02:31:54.942431Z","shell.execute_reply":"2024-10-29T02:31:54.949631Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"result = []\nfor j in range(len(vocab)):\n    t = vocab[j]\n    result.append(idf(t))\n\nidf_ = pd.DataFrame(result, index=vocab, columns=[\"IDF\"])\nidf_\n\n# IDF값이 낮다 = 빈도가 높음.","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:28:18.310944Z","iopub.execute_input":"2024-10-29T02:28:18.311396Z","iopub.status.idle":"2024-10-29T02:28:18.339559Z","shell.execute_reply.started":"2024-10-29T02:28:18.311351Z","shell.execute_reply":"2024-10-29T02:28:18.338398Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"          IDF\n과일이  0.693147\n길고   0.693147\n노란   0.693147\n먹고   0.287682\n바나나  0.287682\n사과   0.693147\n싶은   0.287682\n저는   0.693147\n좋아요  0.693147","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>IDF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>과일이</th>\n      <td>0.693147</td>\n    </tr>\n    <tr>\n      <th>길고</th>\n      <td>0.693147</td>\n    </tr>\n    <tr>\n      <th>노란</th>\n      <td>0.693147</td>\n    </tr>\n    <tr>\n      <th>먹고</th>\n      <td>0.287682</td>\n    </tr>\n    <tr>\n      <th>바나나</th>\n      <td>0.287682</td>\n    </tr>\n    <tr>\n      <th>사과</th>\n      <td>0.693147</td>\n    </tr>\n    <tr>\n      <th>싶은</th>\n      <td>0.287682</td>\n    </tr>\n    <tr>\n      <th>저는</th>\n      <td>0.693147</td>\n    </tr>\n    <tr>\n      <th>좋아요</th>\n      <td>0.693147</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#  TF-IDF 행렬을 출력\nresult = []\nfor i in range(N):\n    result.append([])\n    d = docs[i]\n    for j in range(len(vocab)):\n        t = vocab[j]\n        result[-1].append(tfidf(t,d))\n\ntfidf_ = pd.DataFrame(result, columns = vocab)\ntfidf_","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:30:55.289940Z","iopub.execute_input":"2024-10-29T02:30:55.290415Z","iopub.status.idle":"2024-10-29T02:30:55.312729Z","shell.execute_reply.started":"2024-10-29T02:30:55.290370Z","shell.execute_reply":"2024-10-29T02:30:55.311352Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"        과일이        길고        노란        먹고       바나나        사과        싶은  \\\n0  0.000000  0.000000  0.000000  0.287682  0.000000  0.693147  0.287682   \n1  0.000000  0.000000  0.000000  0.287682  0.287682  0.000000  0.287682   \n2  0.000000  0.693147  0.693147  0.000000  0.575364  0.000000  0.000000   \n3  0.693147  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n\n         저는       좋아요  \n0  0.000000  0.000000  \n1  0.000000  0.000000  \n2  0.000000  0.000000  \n3  0.693147  0.693147  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>과일이</th>\n      <th>길고</th>\n      <th>노란</th>\n      <th>먹고</th>\n      <th>바나나</th>\n      <th>사과</th>\n      <th>싶은</th>\n      <th>저는</th>\n      <th>좋아요</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.287682</td>\n      <td>0.000000</td>\n      <td>0.693147</td>\n      <td>0.287682</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.287682</td>\n      <td>0.287682</td>\n      <td>0.000000</td>\n      <td>0.287682</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.000000</td>\n      <td>0.693147</td>\n      <td>0.693147</td>\n      <td>0.000000</td>\n      <td>0.575364</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.693147</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.693147</td>\n      <td>0.693147</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 사이킷런을 이용한 DTM과 TF-IDF 실습\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncorpus = [\n    'you know I want your love',\n    'I like you',\n    'what should I do ',    \n]\n\nvector = CountVectorizer()\n\n# 코퍼스로부터 각 단어의 빈도수를 기록\nprint(vector.fit_transform(corpus).toarray())\n\n# 각 단어와 맵핑된 인덱스 출력\nprint(vector.vocabulary_)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:28:56.593093Z","iopub.execute_input":"2024-10-29T02:28:56.593550Z","iopub.status.idle":"2024-10-29T02:28:57.267198Z","shell.execute_reply.started":"2024-10-29T02:28:56.593507Z","shell.execute_reply":"2024-10-29T02:28:57.266007Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"[[0 1 0 1 0 1 0 1 1]\n [0 0 1 0 0 0 0 1 0]\n [1 0 0 0 1 0 1 0 0]]\n{'you': 7, 'know': 1, 'want': 5, 'your': 8, 'love': 3, 'like': 2, 'what': 6, 'should': 4, 'do': 0}\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ncorpus = [\n    'you know I want your love',\n    'I like you',\n    'what should I do ',    \n]\n\ntfidfv = TfidfVectorizer().fit(corpus)\nprint(tfidfv.transform(corpus).toarray())\nprint(tfidfv.vocabulary_)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:29:05.319236Z","iopub.execute_input":"2024-10-29T02:29:05.319855Z","iopub.status.idle":"2024-10-29T02:29:05.342681Z","shell.execute_reply.started":"2024-10-29T02:29:05.319808Z","shell.execute_reply":"2024-10-29T02:29:05.341409Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"[[0.         0.46735098 0.         0.46735098 0.         0.46735098\n  0.         0.35543247 0.46735098]\n [0.         0.         0.79596054 0.         0.         0.\n  0.         0.60534851 0.        ]\n [0.57735027 0.         0.         0.         0.57735027 0.\n  0.57735027 0.         0.        ]]\n{'you': 7, 'know': 1, 'want': 5, 'your': 8, 'love': 3, 'like': 2, 'what': 6, 'should': 4, 'do': 0}\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}