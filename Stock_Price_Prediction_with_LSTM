{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport pandas_datareader.data as pdr\nimport datetime\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\nimport numpy as np\nimport argparse\nfrom copy import deepcopy # Add Deepcopy for args\nfrom sklearn.metrics import mean_absolute_error\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\nprint(torch.__version__)\n%matplotlib inline\n%pylab inline\npylab.rcParams['figure.figsize'] = (15, 9)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:16.741635Z","iopub.execute_input":"2024-11-04T06:16:16.742538Z","iopub.status.idle":"2024-11-04T06:16:16.760303Z","shell.execute_reply.started":"2024-11-04T06:16:16.742480Z","shell.execute_reply":"2024-11-04T06:16:16.758634Z"}},"outputs":[{"name":"stdout","text":"2.4.0+cpu\n%pylab is deprecated, use %matplotlib inline and import the required libraries.\nPopulating the interactive namespace from numpy and matplotlib\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"# Pandas Datareader Test","metadata":{}},{"cell_type":"code","source":"pip install yfinance","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:18.211955Z","iopub.execute_input":"2024-11-04T06:16:18.213936Z","iopub.status.idle":"2024-11-04T06:16:32.523795Z","shell.execute_reply.started":"2024-11-04T06:16:18.213750Z","shell.execute_reply":"2024-11-04T06:16:32.522074Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: yfinance in /opt/conda/lib/python3.10/site-packages (0.2.48)\nRequirement already satisfied: pandas>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.2.3)\nRequirement already satisfied: numpy>=1.16.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.32.3)\nRequirement already satisfied: multitasking>=0.0.7 in /opt/conda/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (5.3.0)\nRequirement already satisfied: platformdirs>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (3.11.0)\nRequirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.4.4)\nRequirement already satisfied: peewee>=3.16.2 in /opt/conda/lib/python3.10/site-packages (from yfinance) (3.17.7)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.8.30)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"import yfinance as yf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:43.822381Z","iopub.execute_input":"2024-11-04T06:16:43.822961Z","iopub.status.idle":"2024-11-04T06:16:43.830713Z","shell.execute_reply.started":"2024-11-04T06:16:43.822910Z","shell.execute_reply":"2024-11-04T06:16:43.828931Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# We will look at stock prices over the past year, starting at January 1, 2016\nstart = (2000, 12, 1)\nstart = datetime.datetime(*start)\nend = datetime.date.today()\n\ngoogle = yf.download('028050.KS', start, end)\n# 2000.12.1 부터 24년까지의 삼성(028050.KS) 주식그래프","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:44.707893Z","iopub.execute_input":"2024-11-04T06:16:44.708531Z","iopub.status.idle":"2024-11-04T06:16:44.833554Z","shell.execute_reply.started":"2024-11-04T06:16:44.708481Z","shell.execute_reply":"2024-11-04T06:16:44.832095Z"}},"outputs":[{"name":"stderr","text":"[*********************100%***********************]  1 of 1 completed\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"google.Low.plot(grid=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:45.667399Z","iopub.execute_input":"2024-11-04T06:16:45.667834Z","iopub.status.idle":"2024-11-04T06:16:46.357900Z","shell.execute_reply.started":"2024-11-04T06:16:45.667793Z","shell.execute_reply":"2024-11-04T06:16:46.356269Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Date'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x900 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"google.tail()\nprint(google.isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:47.362070Z","iopub.execute_input":"2024-11-04T06:16:47.362532Z","iopub.status.idle":"2024-11-04T06:16:47.374309Z","shell.execute_reply.started":"2024-11-04T06:16:47.362489Z","shell.execute_reply":"2024-11-04T06:16:47.372621Z"}},"outputs":[{"name":"stdout","text":"Price      Ticker   \nAdj Close  028050.KS    0\nClose      028050.KS    0\nHigh       028050.KS    0\nLow        028050.KS    0\nOpen       028050.KS    0\nVolume     028050.KS    0\ndtype: int64\n","output_type":"stream"}],"execution_count":29},{"cell_type":"markdown","source":"# Data Preparation","metadata":{}},{"cell_type":"code","source":"class StockDataset(Dataset):\n    \n    def __init__(self, symbol, x_frames, y_frames, start, end):\n        \n        self.symbol = symbol\n        self.x_frames = x_frames\n        self.y_frames = y_frames\n        \n        self.start = datetime.datetime(*start)\n        self.end = datetime.datetime(*end)\n\n        # self.data = pdr.DataReader(self.symbol, 'yahoo', self.start, self.end)\n        self.data = yf.download(self.symbol,  start=self.start, end=self.end)\n        \n        print(self.data.isna().sum())\n        \n    def __len__(self):\n        return len(self.data) - (self.x_frames + self.y_frames) + 1\n    # n일의 데이터를 통해 y의 값을 예측을 반복함.\n    # ex) x=5 y=1 ==> 5일의 연속된 데이터를 통해 6번째의 요일의 데이터를 예측함.\n    def __getitem__(self, idx):\n        idx += self.x_frames\n        data = self.data.iloc[idx-self.x_frames:idx+self.y_frames]\n        data = data[['High', 'Low', 'Open', 'Close', 'Adj Close', 'Volume']]\n        data = data.apply(lambda x: np.log(x+1) - np.log(x[self.x_frames-1]+1))\n        data = data.values\n        X = data[:self.x_frames]\n        y = data[self.x_frames:]\n        \n        return X, y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:48.921462Z","iopub.execute_input":"2024-11-04T06:16:48.921950Z","iopub.status.idle":"2024-11-04T06:16:48.936089Z","shell.execute_reply.started":"2024-11-04T06:16:48.921905Z","shell.execute_reply":"2024-11-04T06:16:48.934559Z"}},"outputs":[],"execution_count":30},{"cell_type":"markdown","source":"# Model Define","metadata":{}},{"cell_type":"code","source":"class LSTM(nn.Module):\n    \n    def __init__(self, input_dim, hidden_dim, output_dim, num_layers, batch_size, dropout, use_bn):\n        super(LSTM, self).__init__()\n        self.input_dim = input_dim \n        self.hidden_dim = hidden_dim\n        self.output_dim = output_dim\n        self.num_layers = num_layers\n\n        self.batch_size = batch_size\n        self.dropout = dropout\n        self.use_bn = use_bn \n        \n        self.lstm = nn.LSTM(self.input_dim, self.hidden_dim, self.num_layers)\n        self.hidden = self.init_hidden()\n        self.regressor = self.make_regressor()\n        \n    def init_hidden(self):\n        return (torch.zeros(self.num_layers, self.batch_size, self.hidden_dim),\n                torch.zeros(self.num_layers, self.batch_size, self.hidden_dim))\n    \n    def make_regressor(self):\n        layers = []\n        if self.use_bn:\n            layers.append(nn.BatchNorm1d(self.hidden_dim))\n        layers.append(nn.Dropout(self.dropout))\n        \n        layers.append(nn.Linear(self.hidden_dim, self.hidden_dim // 2))\n        layers.append(nn.ReLU())\n        layers.append(nn.Linear(self.hidden_dim // 2, self.output_dim))\n        regressor = nn.Sequential(*layers)\n        return regressor\n    \n    def forward(self, x):\n        lstm_out, self.hidden = self.lstm(x, self.hidden)\n        y_pred = self.regressor(lstm_out[-1].view(self.batch_size, -1))\n        return y_pred","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:50.225568Z","iopub.execute_input":"2024-11-04T06:16:50.226121Z","iopub.status.idle":"2024-11-04T06:16:50.242710Z","shell.execute_reply.started":"2024-11-04T06:16:50.226073Z","shell.execute_reply":"2024-11-04T06:16:50.240885Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"def metric(y_pred, y_true):\n    perc_y_pred = np.exp(y_pred.cpu().detach().numpy())\n    perc_y_true = np.exp(y_true.cpu().detach().numpy())\n    mae = mean_absolute_error(perc_y_true, perc_y_pred, multioutput='raw_values')\n    return mae*100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:50.865582Z","iopub.execute_input":"2024-11-04T06:16:50.867425Z","iopub.status.idle":"2024-11-04T06:16:50.876248Z","shell.execute_reply.started":"2024-11-04T06:16:50.867350Z","shell.execute_reply":"2024-11-04T06:16:50.874085Z"}},"outputs":[],"execution_count":32},{"cell_type":"markdown","source":"# Train, Validate, Test","metadata":{}},{"cell_type":"code","source":"def train(model, partition, optimizer, loss_fn, args):\n    trainloader = DataLoader(partition['train'], \n                             batch_size=args.batch_size, \n                             shuffle=True, drop_last=True)\n    model.train()\n    model.zero_grad()\n    optimizer.zero_grad()\n\n    train_acc = 0.0\n    train_loss = 0.0\n    for i, (X, y) in enumerate(trainloader):\n\n        X = X.transpose(0, 1).float().to(args.device)\n        y_true = y[:, :, 3].float().to(args.device)\n        #print(torch.max(X[:, :, 3]), torch.max(y_true))\n\n        model.zero_grad()\n        optimizer.zero_grad()\n        model.hidden = [hidden.to(args.device) for hidden in model.init_hidden()]\n\n        y_pred = model(X)\n        loss = loss_fn(y_pred.view(-1), y_true.view(-1))\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        train_acc += metric(y_pred, y_true)[0]\n\n    train_loss = train_loss / len(trainloader)\n    train_acc = train_acc / len(trainloader)\n    return model, train_loss, train_acc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:52.073558Z","iopub.execute_input":"2024-11-04T06:16:52.074133Z","iopub.status.idle":"2024-11-04T06:16:52.086882Z","shell.execute_reply.started":"2024-11-04T06:16:52.074085Z","shell.execute_reply":"2024-11-04T06:16:52.085270Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"def validate(model, partition, loss_fn, args):\n    valloader = DataLoader(partition['val'], \n                           batch_size=args.batch_size, \n                           shuffle=False, drop_last=True)\n    model.eval()\n\n    val_acc = 0.0\n    val_loss = 0.0\n    with torch.no_grad():\n        for i, (X, y) in enumerate(valloader):\n\n            X = X.transpose(0, 1).float().to(args.device)\n            y_true = y[:, :, 3].float().to(args.device)\n            model.hidden = [hidden.to(args.device) for hidden in model.init_hidden()]\n\n            y_pred = model(X)\n            loss = loss_fn(y_pred.view(-1), y_true.view(-1))\n\n            val_loss += loss.item()\n            val_acc += metric(y_pred, y_true)[0]\n\n    val_loss = val_loss / len(valloader)\n    val_acc = val_acc / len(valloader)\n    return val_loss, val_acc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:52.808240Z","iopub.execute_input":"2024-11-04T06:16:52.808830Z","iopub.status.idle":"2024-11-04T06:16:52.822974Z","shell.execute_reply.started":"2024-11-04T06:16:52.808776Z","shell.execute_reply":"2024-11-04T06:16:52.821436Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"def test(model, partition, args):\n    testloader = DataLoader(partition['test'], \n                           batch_size=args.batch_size, \n                           shuffle=False, drop_last=True)\n    model.eval()\n\n    test_acc = 0.0\n    with torch.no_grad():\n        for i, (X, y) in enumerate(testloader):\n\n            X = X.transpose(0, 1).float().to(args.device)\n            y_true = y[:, :, 3].float().to(args.device)\n            model.hidden = [hidden.to(args.device) for hidden in model.init_hidden()]\n\n            y_pred = model(X)\n            test_acc += metric(y_pred, y_true)[0]\n\n    test_acc = test_acc / len(testloader)\n    return test_acc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:53.256730Z","iopub.execute_input":"2024-11-04T06:16:53.257231Z","iopub.status.idle":"2024-11-04T06:16:53.268564Z","shell.execute_reply.started":"2024-11-04T06:16:53.257155Z","shell.execute_reply":"2024-11-04T06:16:53.266828Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"def experiment(partition, args):\n\n    model = LSTM(args.input_dim, args.hid_dim, args.y_frames, args.n_layers, args.batch_size, args.dropout, args.use_bn)\n    model.to(args.device)\n    loss_fn = torch.nn.MSELoss()\n\n    loss_fn = nn.MSELoss()\n    if args.optim == 'SGD':\n        optimizer = optim.RMSprop(model.parameters(), lr=args.lr, weight_decay=args.l2)\n    elif args.optim == 'RMSprop':\n        optimizer = optim.RMSprop(model.parameters(), lr=args.lr, weight_decay=args.l2)\n    elif args.optim == 'Adam':\n        optimizer = optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.l2)\n    else:\n        raise ValueError('In-valid optimizer choice')\n    \n    # ===== List for epoch-wise data ====== #\n    train_losses = []\n    val_losses = []\n    train_accs = []\n    val_accs = []\n    # ===================================== #\n        \n    for epoch in range(args.epoch):  # loop over the dataset multiple times\n        ts = time.time()\n        model, train_loss, train_acc = train(model, partition, optimizer, loss_fn, args)\n        val_loss, val_acc = validate(model, partition, loss_fn, args)\n        te = time.time()\n        \n        # ====== Add Epoch Data ====== #\n        train_losses.append(train_loss)\n        val_losses.append(val_loss)\n        train_accs.append(train_acc)\n        val_accs.append(val_acc)\n        # ============================ #\n        \n        print('Epoch {}, Acc(train/val): {:2.2f}/{:2.2f}, Loss(train/val) {:2.5f}/{:2.5f}. Took {:2.2f} sec'.format(epoch, train_acc, val_acc, train_loss, val_loss, te-ts))\n        \n    test_acc = test(model, partition, args)    \n    \n    # ======= Add Result to Dictionary ======= #\n    result = {}\n    result['train_losses'] = train_losses\n    result['val_losses'] = val_losses\n    result['train_accs'] = train_accs\n    result['val_accs'] = val_accs\n    result['train_acc'] = train_acc\n    result['val_acc'] = val_acc\n    result['test_acc'] = test_acc\n    return vars(args), result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:53.889150Z","iopub.execute_input":"2024-11-04T06:16:53.889658Z","iopub.status.idle":"2024-11-04T06:16:53.905939Z","shell.execute_reply.started":"2024-11-04T06:16:53.889594Z","shell.execute_reply":"2024-11-04T06:16:53.904531Z"}},"outputs":[],"execution_count":36},{"cell_type":"markdown","source":"# Manage Experiment","metadata":{}},{"cell_type":"code","source":"import hashlib\nimport json\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\n\ndef save_exp_result(setting, result):\n    exp_name = setting['exp_name']\n    del setting['epoch']\n\n    hash_key = hashlib.sha1(str(setting).encode()).hexdigest()[:6]\n    filename = './results/{}-{}.json'.format(exp_name, hash_key)\n    result.update(setting)\n    with open(filename, 'w') as f:\n        json.dump(result, f)\n\n    \ndef load_exp_result(exp_name):\n    dir_path = './results'\n    filenames = [f for f in listdir(dir_path) if isfile(join(dir_path, f)) if '.json' in f]\n    list_result = []\n    for filename in filenames:\n        if exp_name in filename:\n            with open(join(dir_path, filename), 'r') as infile:\n                results = json.load(infile)\n                list_result.append(results)\n    df = pd.DataFrame(list_result) # .drop(columns=[])\n    return df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:55.200145Z","iopub.execute_input":"2024-11-04T06:16:55.200645Z","iopub.status.idle":"2024-11-04T06:16:55.213412Z","shell.execute_reply.started":"2024-11-04T06:16:55.200602Z","shell.execute_reply":"2024-11-04T06:16:55.212044Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"def plot_acc(var1, var2, df):\n\n    fig, ax = plt.subplots(1, 3)\n    fig.set_size_inches(15, 6)\n    sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\n\n    sns.barplot(x=var1, y='train_acc', hue=var2, data=df, ax=ax[0])\n    sns.barplot(x=var1, y='val_acc', hue=var2, data=df, ax=ax[1])\n    sns.barplot(x=var1, y='test_acc', hue=var2, data=df, ax=ax[2])\n    \n    ax[0].set_title('Train Accuracy')\n    ax[1].set_title('Validation Accuracy')\n    ax[2].set_title('Test Accuracy')\n\n    \ndef plot_loss_variation(var1, var2, df, **kwargs):\n\n    list_v1 = df[var1].unique()\n    list_v2 = df[var2].unique()\n    list_data = []\n\n    for value1 in list_v1:\n        for value2 in list_v2:\n            row = df.loc[df[var1]==value1]\n            row = row.loc[df[var2]==value2]\n\n            train_losses = list(row.train_losses)[0]\n            val_losses = list(row.val_losses)[0]\n\n            for epoch, train_loss in enumerate(train_losses):\n                list_data.append({'type':'train', 'loss':train_loss, 'epoch':epoch, var1:value1, var2:value2})\n            for epoch, val_loss in enumerate(val_losses):\n                list_data.append({'type':'val', 'loss':val_loss, 'epoch':epoch, var1:value1, var2:value2})\n\n    df = pd.DataFrame(list_data)\n    g = sns.FacetGrid(df, row=var2, col=var1, hue='type', **kwargs)\n    g = g.map(plt.plot, 'epoch', 'loss', marker='.')\n    g.add_legend()\n    g.fig.suptitle('Train loss vs Val loss')\n    plt.subplots_adjust(top=0.89) # 만약 Title이 그래프랑 겹친다면 top 값을 조정해주면 됩니다! 함수 인자로 받으면 그래프마다 조절할 수 있겠죠?\n\n\ndef plot_acc_variation(var1, var2, df, **kwargs):\n    list_v1 = df[var1].unique()\n    list_v2 = df[var2].unique()\n    list_data = []\n\n    for value1 in list_v1:\n        for value2 in list_v2:\n            row = df.loc[df[var1]==value1]\n            row = row.loc[df[var2]==value2]\n\n            train_accs = list(row.train_accs)[0]\n            val_accs = list(row.val_accs)[0]\n            test_acc = list(row.test_acc)[0]\n\n            for epoch, train_acc in enumerate(train_accs):\n                list_data.append({'type':'train', 'Acc':train_acc, 'test_acc':test_acc, 'epoch':epoch, var1:value1, var2:value2})\n            for epoch, val_acc in enumerate(val_accs):\n                list_data.append({'type':'val', 'Acc':val_acc, 'test_acc':test_acc, 'epoch':epoch, var1:value1, var2:value2})\n\n    df = pd.DataFrame(list_data)\n    g = sns.FacetGrid(df, row=var2, col=var1, hue='type', **kwargs)\n    g = g.map(plt.plot, 'epoch', 'Acc', marker='.')\n\n    def show_acc(x, y, metric, **kwargs):\n        plt.scatter(x, y, alpha=0.3, s=1)\n        metric = \"Test Acc: {:1.3f}\".format(list(metric.values)[0])\n        plt.text(0.05, 0.95, metric,  horizontalalignment='left', verticalalignment='center', transform=plt.gca().transAxes, bbox=dict(facecolor='yellow', alpha=0.5, boxstyle=\"round,pad=0.1\"))\n    g = g.map(show_acc, 'epoch', 'Acc', 'test_acc')\n\n    g.add_legend()\n    g.fig.suptitle('Train Accuracy vs Val Accuracy')\n    plt.subplots_adjust(top=0.89)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:55.889026Z","iopub.execute_input":"2024-11-04T06:16:55.889557Z","iopub.status.idle":"2024-11-04T06:16:55.915054Z","shell.execute_reply.started":"2024-11-04T06:16:55.889508Z","shell.execute_reply":"2024-11-04T06:16:55.913580Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"trainset = StockDataset(args.symbol, args.x_frames, args.y_frames, (2000,1,1), (2012,1,1))\nvalset = StockDataset(args.symbol, args.x_frames, args.y_frames, (2012,1,1), (2016,1,1))\ntestset = StockDataset(args.symbol, args.x_frames, args.y_frames, (2016,1,1), (2019,2,1))\npartition = {'train': trainset, 'val':valset, 'test':testset}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:16:56.634698Z","iopub.execute_input":"2024-11-04T06:16:56.635121Z","iopub.status.idle":"2024-11-04T06:16:56.691777Z","shell.execute_reply.started":"2024-11-04T06:16:56.635081Z","shell.execute_reply":"2024-11-04T06:16:56.690255Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[39], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m trainset \u001b[38;5;241m=\u001b[39m StockDataset(\u001b[43margs\u001b[49m\u001b[38;5;241m.\u001b[39msymbol, args\u001b[38;5;241m.\u001b[39mx_frames, args\u001b[38;5;241m.\u001b[39my_frames, (\u001b[38;5;241m2000\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m), (\u001b[38;5;241m2012\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m))\n\u001b[1;32m      2\u001b[0m valset \u001b[38;5;241m=\u001b[39m StockDataset(args\u001b[38;5;241m.\u001b[39msymbol, args\u001b[38;5;241m.\u001b[39mx_frames, args\u001b[38;5;241m.\u001b[39my_frames, (\u001b[38;5;241m2012\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m), (\u001b[38;5;241m2016\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m))\n\u001b[1;32m      3\u001b[0m testset \u001b[38;5;241m=\u001b[39m StockDataset(args\u001b[38;5;241m.\u001b[39msymbol, args\u001b[38;5;241m.\u001b[39mx_frames, args\u001b[38;5;241m.\u001b[39my_frames, (\u001b[38;5;241m2016\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m), (\u001b[38;5;241m2019\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m1\u001b[39m))\n","\u001b[0;31mNameError\u001b[0m: name 'args' is not defined"],"ename":"NameError","evalue":"name 'args' is not defined","output_type":"error"}],"execution_count":39},{"cell_type":"code","source":"# ====== Random Seed Initialization ====== #\nseed = 666\nnp.random.seed(seed)\ntorch.manual_seed(seed)\n\nparser = argparse.ArgumentParser()\nargs = parser.parse_args(\"\")\nargs.exp_name = \"exp1_lr\"\nargs.device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n# ====== Data Loading ====== #\nargs.symbol = '028050.KS'\nargs.batch_size = 128\nargs.x_frames = 5\nargs.y_frames = 5\n\n# ====== Model Capacity ===== #\nargs.input_dim = 6\nargs.hid_dim = 50\nargs.n_layers = 2\n\n# ====== Regularization ======= #\nargs.l2 = 0.00001\nargs.dropout = 0.0\nargs.use_bn = True\n\n# ====== Optimizer & Training ====== #\nargs.optim = 'RMSprop' #'RMSprop' #SGD, RMSprop, ADAM...\nargs.lr = 0.0001\nargs.epoch = 2\n\n\n# ====== Experiment Variable ====== #\nname_var1 = 'lr'\nname_var2 = 'n_layers'\nlist_var1 = [0.001, 0.0001, 0.00001]\nlist_var2 = [1,2,3]\n\n\nfor var1 in list_var1:\n    for var2 in list_var2:\n        setattr(args, name_var1, var1)\n        setattr(args, name_var2, var2)\n        print(args)\n                \n        setting, result = experiment(partition, deepcopy(args))\n        save_exp_result(setting, result)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:20:31.421733Z","iopub.execute_input":"2024-11-04T06:20:31.422471Z","iopub.status.idle":"2024-11-04T06:20:33.070704Z","shell.execute_reply.started":"2024-11-04T06:20:31.422412Z","shell.execute_reply":"2024-11-04T06:20:33.068655Z"}},"outputs":[{"name":"stdout","text":"Namespace(exp_name='exp1_lr', device='cpu', symbol='028050.KS', batch_size=128, x_frames=5, y_frames=5, input_dim=6, hid_dim=50, n_layers=1, l2=1e-05, dropout=0.0, use_bn=True, optim='RMSprop', lr=0.001, epoch=2)\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[40], line 46\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[38;5;28msetattr\u001b[39m(args, name_var2, var2)\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28mprint\u001b[39m(args)\n\u001b[0;32m---> 46\u001b[0m setting, result \u001b[38;5;241m=\u001b[39m \u001b[43mexperiment\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpartition\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdeepcopy\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     47\u001b[0m save_exp_result(setting, result)\n","Cell \u001b[0;32mIn[36], line 26\u001b[0m, in \u001b[0;36mexperiment\u001b[0;34m(partition, args)\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m epoch \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(args\u001b[38;5;241m.\u001b[39mepoch):  \u001b[38;5;66;03m# loop over the dataset multiple times\u001b[39;00m\n\u001b[1;32m     25\u001b[0m     ts \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n\u001b[0;32m---> 26\u001b[0m     model, train_loss, train_acc \u001b[38;5;241m=\u001b[39m \u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpartition\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moptimizer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mloss_fn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     27\u001b[0m     val_loss, val_acc \u001b[38;5;241m=\u001b[39m validate(model, partition, loss_fn, args)\n\u001b[1;32m     28\u001b[0m     te \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n","Cell \u001b[0;32mIn[33], line 2\u001b[0m, in \u001b[0;36mtrain\u001b[0;34m(model, partition, optimizer, loss_fn, args)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mtrain\u001b[39m(model, partition, optimizer, loss_fn, args):\n\u001b[0;32m----> 2\u001b[0m     trainloader \u001b[38;5;241m=\u001b[39m DataLoader(\u001b[43mpartition\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtrain\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m, \n\u001b[1;32m      3\u001b[0m                              batch_size\u001b[38;5;241m=\u001b[39margs\u001b[38;5;241m.\u001b[39mbatch_size, \n\u001b[1;32m      4\u001b[0m                              shuffle\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, drop_last\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      5\u001b[0m     model\u001b[38;5;241m.\u001b[39mtrain()\n\u001b[1;32m      6\u001b[0m     model\u001b[38;5;241m.\u001b[39mzero_grad()\n","\u001b[0;31mTypeError\u001b[0m: 'numpy._ArrayFunctionDispatcher' object is not subscriptable"],"ename":"TypeError","evalue":"'numpy._ArrayFunctionDispatcher' object is not subscriptable","output_type":"error"}],"execution_count":40},{"cell_type":"code","source":"var1 = 'lr'\nvar2 = 'n_layers'\ndf = load_exp_result('exp1')\n\nplot_acc(var1, var2, df)\nplot_loss_variation(var1, var2, df, sharey=False) #sharey를 True로 하면 모둔 subplot의 y축의 스케일이 같아집니다.\nplot_acc_variation(var1, var2, df, margin_titles=True, sharey=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-04T06:20:41.313716Z","iopub.execute_input":"2024-11-04T06:20:41.315360Z","iopub.status.idle":"2024-11-04T06:20:41.400374Z","shell.execute_reply.started":"2024-11-04T06:20:41.315275Z","shell.execute_reply":"2024-11-04T06:20:41.398835Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[41], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m var1 \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlr\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      2\u001b[0m var2 \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_layers\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m----> 3\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mload_exp_result\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mexp1\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m plot_acc(var1, var2, df)\n\u001b[1;32m      6\u001b[0m plot_loss_variation(var1, var2, df, sharey\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m) \u001b[38;5;66;03m#sharey를 True로 하면 모둔 subplot의 y축의 스케일이 같아집니다.\u001b[39;00m\n","Cell \u001b[0;32mIn[37], line 20\u001b[0m, in \u001b[0;36mload_exp_result\u001b[0;34m(exp_name)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mload_exp_result\u001b[39m(exp_name):\n\u001b[1;32m     19\u001b[0m     dir_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m./results\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m---> 20\u001b[0m     filenames \u001b[38;5;241m=\u001b[39m [f \u001b[38;5;28;01mfor\u001b[39;00m f \u001b[38;5;129;01min\u001b[39;00m \u001b[43mlistdir\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdir_path\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m isfile(join(dir_path, f)) \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.json\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01min\u001b[39;00m f]\n\u001b[1;32m     21\u001b[0m     list_result \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     22\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m filename \u001b[38;5;129;01min\u001b[39;00m filenames:\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './results'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: './results'","output_type":"error"}],"execution_count":41},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}