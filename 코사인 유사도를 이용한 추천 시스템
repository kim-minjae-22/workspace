{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-29T02:46:56.846870Z","iopub.execute_input":"2024-10-29T02:46:56.848092Z","iopub.status.idle":"2024-10-29T02:46:56.864446Z","shell.execute_reply.started":"2024-10-29T02:46:56.848032Z","shell.execute_reply":"2024-10-29T02:46:56.863280Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"/kaggle/input/the-movies-dataset/ratings.csv\n/kaggle/input/the-movies-dataset/links_small.csv\n/kaggle/input/the-movies-dataset/credits.csv\n/kaggle/input/the-movies-dataset/keywords.csv\n/kaggle/input/the-movies-dataset/movies_metadata.csv\n/kaggle/input/the-movies-dataset/ratings_small.csv\n/kaggle/input/the-movies-dataset/links.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# 코사인 유사도(Cosine Similarity)\n# Numpy를 사용해서 코사인 유사도를 계산하는 함수를 구현하고 \n# 각 문서 벡터 간의 코사인 유사도를 계산\n# 코사인 유사도 1 = 방향이 같음, 0 = 수직, -1 = 정반대\n\n\nimport numpy as np\nfrom numpy import dot\nfrom numpy.linalg import norm\n\ndef cos_sim(A, B):\n    return dot(A, B)/(norm(A)*norm(B))\n\ndoc1 = np.array([0,1,1,1])\ndoc2 = np.array([1,0,1,1])\ndoc3 = np.array([2,0,2,2])\n\nprint('문서 1과 문서2의 유사도 :',cos_sim(doc1, doc2))\nprint('문서 1과 문서3의 유사도 :',cos_sim(doc1, doc3))\nprint('문서 2와 문서3의 유사도 :',cos_sim(doc2, doc3))\n\n#문서 1과 문서2의 유사도 : 0.67\n#문서 1과 문서3의 유사도 : 0.67\n#문서 2과 문서3의 유사도 : 1.00","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:59:57.591636Z","iopub.execute_input":"2024-10-29T02:59:57.592081Z","iopub.status.idle":"2024-10-29T02:59:57.601529Z","shell.execute_reply.started":"2024-10-29T02:59:57.592040Z","shell.execute_reply":"2024-10-29T02:59:57.600173Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"문서 1과 문서2의 유사도 : 0.6666666666666667\n문서 1과 문서3의 유사도 : 0.6666666666666667\n문서 2와 문서3의 유사도 : 1.0000000000000002\n","output_type":"stream"}]},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"rounakbanik/the-movies-dataset\")\n\nprint(\"Path to dataset files:\", path)\n\n# movies_metadata.csv 데이터를 받기위한 코드","metadata":{"execution":{"iopub.status.busy":"2024-10-29T02:59:58.482955Z","iopub.execute_input":"2024-10-29T02:59:58.483366Z","iopub.status.idle":"2024-10-29T02:59:59.985597Z","shell.execute_reply.started":"2024-10-29T02:59:58.483328Z","shell.execute_reply":"2024-10-29T02:59:59.984330Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/the-movies-dataset\n","output_type":"stream"}]},{"cell_type":"code","source":"# /kaggle/input/the-movies-dataset/ratings.csv\n# /kaggle/input/the-movies-dataset/links_small.csv\n# /kaggle/input/the-movies-dataset/credits.csv\n# /kaggle/input/the-movies-dataset/keywords.csv\n# /kaggle/input/the-movies-dataset/movies_metadata.csv\n# /kaggle/input/the-movies-dataset/ratings_small.csv\n# /kaggle/input/the-movies-dataset/links.csv","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:00:01.274648Z","iopub.execute_input":"2024-10-29T03:00:01.275782Z","iopub.status.idle":"2024-10-29T03:00:01.326250Z","shell.execute_reply.started":"2024-10-29T03:00:01.275719Z","shell.execute_reply":"2024-10-29T03:00:01.324593Z"},"trusted":true},"execution_count":4,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[4], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mkaggle\u001b[49m\u001b[38;5;241m/\u001b[39m\u001b[38;5;28minput\u001b[39m\u001b[38;5;241m/\u001b[39mthe\u001b[38;5;241m-\u001b[39mmovies\u001b[38;5;241m-\u001b[39mdataset\u001b[38;5;241m/\u001b[39mratings\u001b[38;5;241m.\u001b[39mcsv()\n\u001b[1;32m      2\u001b[0m kaggle\u001b[38;5;241m/\u001b[39m\u001b[38;5;28minput\u001b[39m\u001b[38;5;241m/\u001b[39mthe\u001b[38;5;241m-\u001b[39mmovies\u001b[38;5;241m-\u001b[39mdataset\u001b[38;5;241m/\u001b[39mlinks_small\u001b[38;5;241m.\u001b[39mcsv()\n\u001b[1;32m      3\u001b[0m kaggle\u001b[38;5;241m/\u001b[39m\u001b[38;5;28minput\u001b[39m\u001b[38;5;241m/\u001b[39mthe\u001b[38;5;241m-\u001b[39mmovies\u001b[38;5;241m-\u001b[39mdataset\u001b[38;5;241m/\u001b[39mcredits\u001b[38;5;241m.\u001b[39mcsv()\n","\u001b[0;31mNameError\u001b[0m: name 'kaggle' is not defined"],"ename":"NameError","evalue":"name 'kaggle' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# 유사도를 이용한 추천 시스템 구현\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndata = pd.read_csv('/kaggle/input/the-movies-dataset/movies_metadata.csv', low_memory=False)\ndata.head(2)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:00:05.063016Z","iopub.execute_input":"2024-10-29T03:00:05.063473Z","iopub.status.idle":"2024-10-29T03:00:07.396088Z","shell.execute_reply.started":"2024-10-29T03:00:05.063434Z","shell.execute_reply":"2024-10-29T03:00:07.394701Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   adult                              belongs_to_collection    budget  \\\n0  False  {'id': 10194, 'name': 'Toy Story Collection', ...  30000000   \n1  False                                                NaN  65000000   \n\n                                              genres  \\\n0  [{'id': 16, 'name': 'Animation'}, {'id': 35, '...   \n1  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...   \n\n                               homepage    id    imdb_id original_language  \\\n0  http://toystory.disney.com/toy-story   862  tt0114709                en   \n1                                   NaN  8844  tt0113497                en   \n\n  original_title                                           overview  ...  \\\n0      Toy Story  Led by Woody, Andy's toys live happily in his ...  ...   \n1        Jumanji  When siblings Judy and Peter discover an encha...  ...   \n\n  release_date      revenue runtime  \\\n0   1995-10-30  373554033.0    81.0   \n1   1995-12-15  262797249.0   104.0   \n\n                                    spoken_languages    status  \\\n0           [{'iso_639_1': 'en', 'name': 'English'}]  Released   \n1  [{'iso_639_1': 'en', 'name': 'English'}, {'iso...  Released   \n\n                                     tagline      title  video vote_average  \\\n0                                        NaN  Toy Story  False          7.7   \n1  Roll the dice and unleash the excitement!    Jumanji  False          6.9   \n\n  vote_count  \n0     5415.0  \n1     2413.0  \n\n[2 rows x 24 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>adult</th>\n      <th>belongs_to_collection</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>homepage</th>\n      <th>id</th>\n      <th>imdb_id</th>\n      <th>original_language</th>\n      <th>original_title</th>\n      <th>overview</th>\n      <th>...</th>\n      <th>release_date</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>spoken_languages</th>\n      <th>status</th>\n      <th>tagline</th>\n      <th>title</th>\n      <th>video</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>{'id': 10194, 'name': 'Toy Story Collection', ...</td>\n      <td>30000000</td>\n      <td>[{'id': 16, 'name': 'Animation'}, {'id': 35, '...</td>\n      <td>http://toystory.disney.com/toy-story</td>\n      <td>862</td>\n      <td>tt0114709</td>\n      <td>en</td>\n      <td>Toy Story</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>...</td>\n      <td>1995-10-30</td>\n      <td>373554033.0</td>\n      <td>81.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n      <td>Released</td>\n      <td>NaN</td>\n      <td>Toy Story</td>\n      <td>False</td>\n      <td>7.7</td>\n      <td>5415.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>NaN</td>\n      <td>65000000</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n      <td>NaN</td>\n      <td>8844</td>\n      <td>tt0113497</td>\n      <td>en</td>\n      <td>Jumanji</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>...</td>\n      <td>1995-12-15</td>\n      <td>262797249.0</td>\n      <td>104.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}, {'iso...</td>\n      <td>Released</td>\n      <td>Roll the dice and unleash the excitement!</td>\n      <td>Jumanji</td>\n      <td>False</td>\n      <td>6.9</td>\n      <td>2413.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 24 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 상위 2만개의 샘플을 data에 저장\ndata = data.head(20000)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:00:10.156574Z","iopub.execute_input":"2024-10-29T03:00:10.157041Z","iopub.status.idle":"2024-10-29T03:00:10.162869Z","shell.execute_reply.started":"2024-10-29T03:00:10.156999Z","shell.execute_reply":"2024-10-29T03:00:10.161561Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# overview 열에 존재하는 모든 결측값을 전부 카운트하여 출력\nprint('overview 열의 결측값의 수:',data['overview'].isnull().sum())\n\n# overview 열의 결측값의 수: 135 = null의 값의 수는 135개다.","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:00:10.635866Z","iopub.execute_input":"2024-10-29T03:00:10.637015Z","iopub.status.idle":"2024-10-29T03:00:10.646644Z","shell.execute_reply.started":"2024-10-29T03:00:10.636964Z","shell.execute_reply":"2024-10-29T03:00:10.645341Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"overview 열의 결측값의 수: 135\n","output_type":"stream"}]},{"cell_type":"code","source":"# 결측값을 빈 값으로 대체\ndata['overview'] = data['overview'].fillna('')","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:01:03.483724Z","iopub.execute_input":"2024-10-29T03:01:03.484226Z","iopub.status.idle":"2024-10-29T03:01:03.496121Z","shell.execute_reply.started":"2024-10-29T03:01:03.484184Z","shell.execute_reply":"2024-10-29T03:01:03.494634Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# overview열에 대해서 TF-IDF 행렬을 구한 후 행렬의 크기를 출력\ntfidf = TfidfVectorizer(stop_words='english')\ntfidf_matrix = tfidf.fit_transform(data['overview'])\nprint('TF-IDF 행렬의 크기(shape) :',tfidf_matrix.shape)\n\n# TF-IDF 행렬의 크기(shape) : (20000, 47487)\n# => 20,000개의 영화를 표현하기 위해서 총 47,487개의 단어가 사용되었음을 의미","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:01:28.372922Z","iopub.execute_input":"2024-10-29T03:01:28.373432Z","iopub.status.idle":"2024-10-29T03:01:29.525537Z","shell.execute_reply.started":"2024-10-29T03:01:28.373382Z","shell.execute_reply":"2024-10-29T03:01:29.521955Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"TF-IDF 행렬의 크기(shape) : (20000, 47487)\n","output_type":"stream"}]},{"cell_type":"code","source":"cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\nprint('코사인 유사도 연산 결과 :',cosine_sim.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:02:05.363067Z","iopub.execute_input":"2024-10-29T03:02:05.363949Z","iopub.status.idle":"2024-10-29T03:02:14.283791Z","shell.execute_reply.started":"2024-10-29T03:02:05.363901Z","shell.execute_reply":"2024-10-29T03:02:14.282422Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"코사인 유사도 연산 결과 : (20000, 20000)\n","output_type":"stream"}]},{"cell_type":"code","source":"# 존 데이터프레임으로부터 영화의 타이틀을 key, \n# 영화의 인덱스를 value로 하는 딕셔너리 title_to_index를 만들어둡니다.\n\ntitle_to_index = dict(zip(data['title'], data.index))\n\n# 영화 제목 Father of the Bride Part II의 인덱스를 리턴\nidx = title_to_index['Father of the Bride Part II']\nprint(idx)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:02:52.596342Z","iopub.execute_input":"2024-10-29T03:02:52.596786Z","iopub.status.idle":"2024-10-29T03:02:52.611736Z","shell.execute_reply.started":"2024-10-29T03:02:52.596747Z","shell.execute_reply":"2024-10-29T03:02:52.610128Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"4\n","output_type":"stream"}]},{"cell_type":"code","source":"def get_recommendations(title, cosine_sim=cosine_sim):\n    # 선택한 영화의 타이틀로부터 해당 영화의 인덱스를 받아온다.\n    idx = title_to_index[title]\n\n    # 해당 영화와 모든 영화와의 유사도를 가져온다.\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # 유사도에 따라 영화들을 정렬한다.\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # 가장 유사한 10개의 영화를 받아온다.\n    sim_scores = sim_scores[1:11]\n\n    # 가장 유사한 10개의 영화의 인덱스를 얻는다.\n    movie_indices = [idx[0] for idx in sim_scores]\n\n    # 가장 유사한 10개의 영화의 제목을 리턴한다.\n    return data['title'].iloc[movie_indices]","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:03:07.130170Z","iopub.execute_input":"2024-10-29T03:03:07.130610Z","iopub.status.idle":"2024-10-29T03:03:07.137998Z","shell.execute_reply.started":"2024-10-29T03:03:07.130569Z","shell.execute_reply":"2024-10-29T03:03:07.136673Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"get_recommendations('The Dark Knight Rises')\n\n# 가장 유사한 영화가 출력되는데, 영화 다크 나이트가 첫번째고,\n# 그 외에도 전부 배트맨 영화를 찾아낸 것을 확인","metadata":{"execution":{"iopub.status.busy":"2024-10-29T03:03:18.882281Z","iopub.execute_input":"2024-10-29T03:03:18.882723Z","iopub.status.idle":"2024-10-29T03:03:18.908355Z","shell.execute_reply.started":"2024-10-29T03:03:18.882683Z","shell.execute_reply":"2024-10-29T03:03:18.907216Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"12481                            The Dark Knight\n150                               Batman Forever\n1328                              Batman Returns\n15511                 Batman: Under the Red Hood\n585                                       Batman\n9230          Batman Beyond: Return of the Joker\n18035                           Batman: Year One\n19792    Batman: The Dark Knight Returns, Part 1\n3095                Batman: Mask of the Phantasm\n10122                              Batman Begins\nName: title, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}